openapi: '3.0.0'
info:
  title: DOGA
  description: ""
  termsOfService: http://doga.io/
  contact:
    email: plotlabs@plotlabs.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.1.0
externalDocs:
  description: Find out more about our DOGA
  url: http://plotlabs.io
servers:
- url: https://doga.plotlabs.io/
- url: http://doga.plotlabs.io/
tags:
- name: admin
  description: APIs accessible to the admin of the content management system. These
    can be used to create, modify, administer access to and deploy applications.
- name: content
  description: APIs that provide access to content
- name: base jwt
  description: These are the endpoints defined for the table in the database (ONLY
    one per database) to register users using a jwt token
- name: export
  description: These endpoints are used to export created apps to aws, heroku or to
    your local machine where you can decide how to deploy them
- name: notification scripts
  description: These endpoints are defined to create & export a script to notify provided
    emails/numbers notifications.
- name: admin dashboard
  description: These endpoints are used to get information for the admin dashboard.
paths:
  /admin/admin_profile:
    post:
      tags:
      - admin
      summary: Add a new admin to the system
      description: Adds a new admin user to the system, which allows access to other
        /admin/content, /admin/export and /admin/dbinit endpoints.
      operationId: Add Admin
      requestBody:
        description: Admin details that needs to be added to the system
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Admin'
        required: true
      responses:
        200:
          description: Admin created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminResponse'
        403:
          description: Admin already exists
          content: {}
        500:
          description: Invalid Input
          content: {}
      x-codegen-request-body-name: body
  /admin/admin_profile/{email}:
    get:
      tags:
      - admin
      summary: Get info on an existing admin
      operationId: Get Admin
      parameters:
      - name: email
        in: path
        required: true
        schema:
          type: string
          format: email
      responses:
        200:
          description: Admin found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminResponse'
        404:
          description: Admin does not exist
          content: {}
      security:
      - Bearer: []
  /admin/login:
    post:
      tags:
      - admin
      summary: API endpoint to allow admin to login
      operationId: Admin Login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminLogin'
        required: true
      responses:
        200:
          description: successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtLoginResponse'
        403:
          description: Admin already exists
          content: {}
        404:
          description: Admin does not exist
          content: {}
        500:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: body
  /admin/content/types:
    get:
      tags:
      - content info
      summary: Lists all the content (as columns) of the app_name created by user along with the connection name.
      operationId: List Content
      responses:
        200:
          description: A list of all the available content on the platform
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Table'
      security:
      - Bearer: []
    post:
      tags:
      - admin
      - content
      summary: Adds the given content to the database connection specified & creates
        API resources for the same
      operationId: Post Content
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Content'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
        400:
          description: Invalid Request
          content:
            application/json:
              schema:
                type: object
      security:
      - Bearer: []
      x-codegen-request-body-name: data
  /admin/columntypes:
    get:
      tags:
      - admin
      - content info
      operationId: List Possible Column Types
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
  /admin/dbinit:
    get:
      tags:
      - admin
      - database
      summary: Lists all the database connection strings
      operationId: List database connections
      responses:
        200:
          description: List of connections
          content:
            application/json:
              schema:
                type: object
      security:
      - Bearer: []
    post:
      tags:
      - admin
      - database
      summary: Add a new database connection to the system
      operationId: Add database connection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Database'
        required: false
      responses:
        200:
          description: Successfully created database connection string
          content: {}
        400:
          description: Could not create database, connection not valid.
          content: {}
      security:
      - Bearer: []
      x-codegen-request-body-name: data
  /admin/content/types/{db_name}/{table_name}:
    delete:
      tags:
      - admin
      summary: Delete the content & its related endpoints specified in the path
      operationId: Delete Content
      parameters:
      - name: db_name
        in: path
        required: true
        schema:
          type: string
      - name: table_name
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
        400:
          description: Invalid Request
          content:
            application/json:
              schema:
                type: object
      security:
      - Bearer: []
  /admin/notify/email:
    post:
      tags:
      - notification scripts
      summary: Creates a script for sending Emails using SendGrid API
      operationId: Admin Create Email Script
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminEmailScript'
        required: true
      responses:
        200:
          description: Successfully created E-mail notification script.
          content: {}
        500:
          description: Response on error
          content:
            application/json:
              schema:
                type: object
      security:
      - Bearer: []
      x-codegen-request-body-name: body
  /admin/notify/sms:
    post:
      tags:
      - notification scripts
      summary: Creates a script for sending SMS notifications using Twilio API
      operationId: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminSMS'
        required: true
      responses:
        200:
          description: Successfully created sms notification script.
          content: {}
        500:
          description: Response on error
          content:
            application/json:
              schema:
                type: object
      security:
      - Bearer: []
      x-codegen-request-body-name: body
  /admin/export/{platform}:
    post:
      tags:
      - export
      operationId: ExportstoAWS
      parameters:
      - name: platform
        in: path
        required: true
        schema:
          type: string
          enum:
          - aws
          - heroku
          - local
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportApp'
        required: false
      responses:
        500:
          description: Response on error
          content:
            application/json:
              schema:
                type: object
        200:
          description: "Request Successful"
      security:
      - Bearer: []
      x-codegen-request-body-name: json_body
  /{db_name}/{table_name}:
    get:
      tags:
      - content
      summary: Retrieve content from the table
      operationId: Get content
      parameters:
      - name: db_name
        in: path
        required: true
        schema:
          type: string
      - name: table_name
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful retrieval of data
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Content'
        404:
          description: Content does not exist
          content: {}
        500:
          description: Bad Request
          content: {}
    post:
      tags:
      - content
      summary: Add data posted to the table
      operationId: Add content
      parameters:
      - name: db_name
        in: path
        required: true
        schema:
          type: string
      - name: table_name
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Content'
        required: false
      responses:
        200:
          description: Successful update of rows
          content: {}
        400:
          description: Unsuccessful request
          content:
            application/json:
              schema:
                type: string
                example: 'Foreign Key constraint failed for column '
      x-codegen-request-body-name: content
  /{db_name}/{table_name}/{id}:
    put:
      tags:
      - content
      summary: Updates the existing content with the given input
      operationId: Add content `jwt base`
      parameters:
      - name: db_name
        in: path
        required: true
        schema:
          type: string
      - name: table_name
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Content'
        required: false
      responses:
        200:
          description: Successfully updated row
          content: {}
        400:
          description: Does not exist
          content: {}
      x-codegen-request-body-name: content
    delete:
      tags:
      - content
      summary: Delete values from the table
      operationId: Delete user from `jwt base`
      parameters:
      - name: db_name
        in: path
        required: true
        schema:
          type: string
      - name: table_name
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Successfully deleted.
          content: {}
  /{db_name}/{table_name}/login:
    post:
      tags:
      - base jwt
      summary: Endpoint to login to `base jwt` content, there will be a maximum of
        one of these per db_name ( database name )
      operationId: Login JWT base content
      parameters:
      - name: db_name
        in: path
        required: true
        schema:
          type: string
      - name: table_name
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtLoginResponse'
        400:
          description: missing field error
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    example: Missing field `field name`
        500:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /admin/dashboard/stats/{section}/{filters}:
    parameters:
      - name: "section"
        in: "path"
        required: True
        schema:
          type: string
          enum:
          - app
          - db
      - name: "filters"
        in: "path"
        required: True
        schema:
          type: "string"
          enum:
          - mysql
          - sqlite
          - postgres
    get:
      tags:
      - 'admin dashboard'
      summary: "Used to get stats for operating the dashboard"
      responses:
        '200':
          description: "Stats to populate the dashboard"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/AdminDashboardDB'
                  - $ref: '#/components/schemas/AdminDashboardApp'
  /admin/content/relations:
    post:
      tags:
      - 'content'
      parameters:
      - name: "app_name"
        in: "query"
        schema:
          type: "string"
      - name: "type"
        in: "query"
        schema:
          type: "string"
      responses:
        '200':
          description: Lists the available keys accoring to type on content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelationsPossible'
components:
  schemas:
    Admin:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
          description: The email-id the admin will use to login
          format: email
        password:
          maxLength: 255
          minLength: 2
          type: string
          description: Password that the admin will use to login
        name:
          maxLength: 32
          minLength: 1
          type: string
          description: This is the name of the admin
    AdminResponse:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
          format: email
    AdminLogin:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
    AdminEmailScript:
      required:
      - api_key
      - template key
      type: object
      properties:
        api_key:
          type: string
        to_emails:
          type: object
          properties:
            name:
              type: string
        template key:
          type: string
        subject:
          type: string
        content:
          type: string
    AdminSMS:
      required:
      - _from
      - account_sid
      type: object
      properties:
        account_sid:
          type: string
        auth_token:
          type: string
        _from:
          type: string
        to:
          type: array
          items:
            type: string
            format: number
        message:
          type: string
    AdminDashboardDB:
      type: "object"
      properties:
        result:
          type: "object"
          properties:
            dbtype:
              type: "string"
              enum:
              - mysql
              - sqlite
              - postgres
            additionalProperties:
              type: "array"
              items:
                type: "string"
                description: "Names od databases"
    AdminDashboardApp:
      type: "object"
      properties:
        result:
          type: "array"
          items:
            type: "string"
            description: "App names listed"
    AWSUserCredentials:
      type: object
      properties:
        aws_secret_key:
          type: string
        aws_access_key:
          type: string
        aws_username:
          type: string
    AWSConfig:
      type: object
      properties:
        region_name:
          type: string
          example: us-east-1
        signature_version:
          type: string
          example: v4
        max_attempts:
          type: integer
          example: 10
        mode:
          type: string
          example: standard
    AWSrdsConfig:
      type: object
      properties:
        Engine:
          type: string
          description: This should be an engine recognised by AWS RDS
          example: MySQL
        AllocatedStorage:
          type: integer
          example: 20
        DBInstanceIdentifier:
          type: string
          description: This should be the name of the DB instance you wish to create
        DBInstanceClass:
          type: string
          description: This is the class if DB instance you wish to create
          example: db.t2.micro
        MasterUsername:
          type: string
          example: admin
        MasterUserPassword:
          type: string
          example: password
        MaxAllocatedStorage:
          type: integer
          example: 21
    AWSEC2Config:
      type: object
      properties:
        BlockDeviceMappings:
          type: array
          items:
            $ref: '#/components/schemas/AWSBlockDeviceMappings'
        InstanceType:
          type: string
          description: This should be a AWS recognised instance type
          example: t2.micro
        ImageId:
          type: string
          example: ami-0885b1f6bd170450c
    AWSBlockDeviceMappings:
      type: object
      properties:
        DeviceName:
          type: string
          example: /dev/sda1
        Ebs:
          type: object
          properties:
            schema:
              $ref: '#/components/schemas/AWSEC2Sorage'
        OtherStorageType:
          type: object
          properties:
            schema:
              $ref: '#/components/schemas/AWSEC2Sorage'
    AWSEC2Sorage:
      type: object
      properties:
        DeleteOnTermination:
          type: boolean
        VolumeSize:
          type: integer
          example: 8
        VolumeType:
          type: string
          example: gp2
    AWSExport:
      type: object
      properties:
        app_name:
          type: string
          description: Name of the app/ db which you want to export
        user_credentials:
          $ref: '#/components/schemas/AWSUserCredentials'
        confg:
          $ref: '#/components/schemas/AWSConfig'
        rds_config:
          $ref: '#/components/schemas/AWSrdsConfig'
        ec2_config:
          $ref: '#/components/schemas/AWSEC2Config'
    ExportApp:
      type: object
      properties:
        schema:
          oneOf:
            - $ref: '#/components/schemas/AWSExport'
            - $ref: '#/components/schemas/HerokuExport'
            - $ref: '#/components/schemas/LocalExport'
    HerokuExport:
      required:
      - app_name
      type: object
      properties:
        app_name:
          type: string
        provision_db:
          type: boolean
          description: If DB is to be provisioned
        tier:
          type: object
          description: Info about the db tier
    LocalExport:
      type: object
      properties:
        app_name:
          type: string
        export_path:
          type: string
    Table:
      required:
      - columns
      - connection_name
      - table_name
      type: object
      properties:
        app_name:
          type: string
        table_name:
          type: string
        connection_name:
          type: string
        columns:
          type: array
          items:
            $ref: '#/components/schemas/Column'
    Column:
      required:
      - name
      - nullable
      - type
      - unique
      type: object
      properties:
        default:
          type: string
        foreign_key:
          type: string
        relationship:
          $ref: '#/components/schemas/ColumnRelationship'
        name:
          type: string
        nullable:
          type: boolean
        type:
          type: string
          format: type
        unique:
          type: boolean
    ColumnRelationship:
      type: object
      required:
        - relationship_type
        - related_field
        - related_table
      properties:
        relationship_type:
          type: string
          enum:
            - 'one-one'
            - 'many-one'
            - 'many-many'
        related_field:
          type: string
        related_table:
          type: string
    Content:
      type: object
      required:
        - columns
        - connection_name
        - app_name
        - table_name
      properties:
        columns:
          type: array
          items:
            $ref: '#/components/schemas/Column'
        table_name:
          type: string
        app_name:
          type: string
        connection_name:
          type: string
    Database:
      required:
      - connection_name
      - database_type
      - database_name
      - host
      - password
      - port
      - username
      type: object
      properties:
        connection_name:
          type: string
        database_type:
          type: string
          enum:
          - mysql
          - sqlite
          - postgres
        database_name:
          type: string
        host:
          type: string
        port:
          type: string
        username:
          type: string
        password:
          type: string
    ErrorResponse:
      type: object
      properties:
        result:
          type: string
          example: Error message
      description: Error Response
    JwtLoginResponse:
      type: object
      properties:
        result:
          type: string
          example: Successfully logged in.
        email:
          type: string
          format: email
        id:
          type: integer
        access_token:
          type: string
          format: jwt
        refresh_toke:
          type: string
          format: jwt
    RelationsPossible:
      type: "object"
      properties:
        TableName:
          type: "string"
          additionalProperties:
            type: "array"
            items:
              type: "string"
  securitySchemes:
    Bearer:
      type: apiKey
      name: Authorization
      in: header
